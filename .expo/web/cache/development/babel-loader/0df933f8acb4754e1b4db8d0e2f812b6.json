{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createReducer;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar ActionConst = _interopRequireWildcard(require(\"./ActionConst\"));\n\nvar _State = require(\"./State\");\n\nfunction createReducer() {\n  return function (state, action) {\n    var navigationStore = require('./navigationStore').default;\n\n    var type = action.type,\n        routeName = action.routeName;\n\n    if (type === ActionConst.POP_TO) {\n      var nextScene = '';\n      var newState = state;\n      var currentState = state;\n\n      while (newState && nextScene !== routeName) {\n        newState = navigationStore.getStateForAction(_reactNavigation.StackActions.pop(), currentState);\n\n        if (newState) {\n          nextScene = (0, _State.getActiveState)(newState).routeName;\n\n          if (nextScene !== routeName && _lodash.default.isEqual(currentState, newState)) {\n            console.warn(\"popTo called with an unknown routeName: \" + routeName + \", current scene: \" + nextScene);\n            break;\n          }\n\n          if (nextScene !== routeName) {\n            currentState = newState;\n          }\n        }\n      }\n\n      return nextScene === routeName ? newState : state;\n    }\n\n    if (type === ActionConst.REPLACE) {\n      var _newState = navigationStore.getStateForAction(_reactNavigation.NavigationActions.navigate({\n        routeName: routeName,\n        params: action.params\n      }), state);\n\n      var res = (0, _State.popPrevious)(_newState, routeName);\n      return res;\n    }\n\n    return navigationStore.getStateForAction(action, state) || state;\n  };\n}","map":{"version":3,"sources":["C:/Users/caka-/Documents/Projetos/app/node_modules/react-native-router-flux/src/Reducer.js"],"names":["createReducer","state","action","navigationStore","require","default","type","routeName","ActionConst","POP_TO","nextScene","newState","currentState","getStateForAction","StackActions","pop","_","isEqual","console","warn","REPLACE","NavigationActions","navigate","params","res"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEe,SAASA,aAAT,GAAyB;AACtC,SAAO,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACxB,QAAMC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAAP,CAA6BC,OAArD;;AADwB,QAEhBC,IAFgB,GAEIJ,MAFJ,CAEhBI,IAFgB;AAAA,QAEVC,SAFU,GAEIL,MAFJ,CAEVK,SAFU;;AAGxB,QAAID,IAAI,KAAKE,WAAW,CAACC,MAAzB,EAAiC;AAC/B,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,QAAQ,GAAGV,KAAf;AACA,UAAIW,YAAY,GAAGX,KAAnB;;AACA,aAAOU,QAAQ,IAAID,SAAS,KAAKH,SAAjC,EAA4C;AAC1CI,QAAAA,QAAQ,GAAGR,eAAe,CAACU,iBAAhB,CAAkCC,8BAAaC,GAAb,EAAlC,EAAsDH,YAAtD,CAAX;;AACA,YAAID,QAAJ,EAAc;AACZD,UAAAA,SAAS,GAAG,2BAAeC,QAAf,EAAyBJ,SAArC;;AACA,cAAIG,SAAS,KAAKH,SAAd,IAA2BS,gBAAEC,OAAF,CAAUL,YAAV,EAAwBD,QAAxB,CAA/B,EAAkE;AAChEO,YAAAA,OAAO,CAACC,IAAR,8CAAwDZ,SAAxD,yBAAqFG,SAArF;AACA;AACD;;AACD,cAAIA,SAAS,KAAKH,SAAlB,EAA6B;AAC3BK,YAAAA,YAAY,GAAGD,QAAf;AACD;AACF;AACF;;AACD,aAAOD,SAAS,KAAKH,SAAd,GAA0BI,QAA1B,GAAqCV,KAA5C;AACD;;AACD,QAAIK,IAAI,KAAKE,WAAW,CAACY,OAAzB,EAAkC;AAChC,UAAMT,SAAQ,GAAGR,eAAe,CAACU,iBAAhB,CACfQ,mCAAkBC,QAAlB,CAA2B;AACzBf,QAAAA,SAAS,EAATA,SADyB;AAEzBgB,QAAAA,MAAM,EAAErB,MAAM,CAACqB;AAFU,OAA3B,CADe,EAKftB,KALe,CAAjB;;AAOA,UAAMuB,GAAG,GAAG,wBAAYb,SAAZ,EAAsBJ,SAAtB,CAAZ;AACA,aAAOiB,GAAP;AACD;;AACD,WAAOrB,eAAe,CAACU,iBAAhB,CAAkCX,MAAlC,EAA0CD,KAA1C,KAAoDA,KAA3D;AACD,GAlCD;AAmCD","sourcesContent":["import _ from 'lodash';\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport * as ActionConst from './ActionConst';\nimport { getActiveState, popPrevious } from './State';\n\nexport default function createReducer() {\n  return (state, action) => {\n    const navigationStore = require('./navigationStore').default;\n    const { type, routeName } = action;\n    if (type === ActionConst.POP_TO) {\n      let nextScene = '';\n      let newState = state;\n      let currentState = state;\n      while (newState && nextScene !== routeName) {\n        newState = navigationStore.getStateForAction(StackActions.pop(), currentState);\n        if (newState) {\n          nextScene = getActiveState(newState).routeName;\n          if (nextScene !== routeName && _.isEqual(currentState, newState)) {\n            console.warn(`popTo called with an unknown routeName: ${routeName}, current scene: ${nextScene}`);\n            break;\n          }\n          if (nextScene !== routeName) {\n            currentState = newState;\n          }\n        }\n      }\n      return nextScene === routeName ? newState : state;\n    }\n    if (type === ActionConst.REPLACE) {\n      const newState = navigationStore.getStateForAction(\n        NavigationActions.navigate({\n          routeName,\n          params: action.params,\n        }),\n        state,\n      );\n      const res = popPrevious(newState, routeName);\n      return res;\n    }\n    return navigationStore.getStateForAction(action, state) || state;\n  };\n}\n"]},"metadata":{},"sourceType":"script"}